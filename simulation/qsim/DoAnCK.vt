// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/30/2023 22:20:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DATAPATH
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DATAPATH_vlg_sample_tst(
	ADDR_RDA,
	ADDR_RDB,
	ADDR_WR,
	CLK,
	IE,
	INPORT,
	OE,
	OPCODE,
	SHIFT_CONTROL,
	WE,
	sampler_tx
);
input [2:0] ADDR_RDA;
input [2:0] ADDR_RDB;
input [2:0] ADDR_WR;
input  CLK;
input  IE;
input [31:0] INPORT;
input  OE;
input [2:0] OPCODE;
input [1:0] SHIFT_CONTROL;
input  WE;
output sampler_tx;

reg sample;
time current_time;
always @(ADDR_RDA or ADDR_RDB or ADDR_WR or CLK or IE or INPORT or OE or OPCODE or SHIFT_CONTROL or WE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DATAPATH_vlg_check_tst (
	S,
	zero,
	sampler_rx
);
input [63:0] S;
input  zero;
input sampler_rx;

reg [63:0] S_expected;
reg  zero_expected;

reg [63:0] S_prev;
reg  zero_prev;

reg [63:0] S_expected_prev;
reg  zero_expected_prev;

reg [63:0] last_S_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	S_prev = S;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	S_expected_prev = S_expected;
	zero_expected_prev = zero_expected;
end


// expected S[ 63 ]
initial
begin
	S_expected[63] = 1'bX;
end 
// expected S[ 62 ]
initial
begin
	S_expected[62] = 1'bX;
end 
// expected S[ 61 ]
initial
begin
	S_expected[61] = 1'bX;
end 
// expected S[ 60 ]
initial
begin
	S_expected[60] = 1'bX;
end 
// expected S[ 59 ]
initial
begin
	S_expected[59] = 1'bX;
end 
// expected S[ 58 ]
initial
begin
	S_expected[58] = 1'bX;
end 
// expected S[ 57 ]
initial
begin
	S_expected[57] = 1'bX;
end 
// expected S[ 56 ]
initial
begin
	S_expected[56] = 1'bX;
end 
// expected S[ 55 ]
initial
begin
	S_expected[55] = 1'bX;
end 
// expected S[ 54 ]
initial
begin
	S_expected[54] = 1'bX;
end 
// expected S[ 53 ]
initial
begin
	S_expected[53] = 1'bX;
end 
// expected S[ 52 ]
initial
begin
	S_expected[52] = 1'bX;
end 
// expected S[ 51 ]
initial
begin
	S_expected[51] = 1'bX;
end 
// expected S[ 50 ]
initial
begin
	S_expected[50] = 1'bX;
end 
// expected S[ 49 ]
initial
begin
	S_expected[49] = 1'bX;
end 
// expected S[ 48 ]
initial
begin
	S_expected[48] = 1'bX;
end 
// expected S[ 47 ]
initial
begin
	S_expected[47] = 1'bX;
end 
// expected S[ 46 ]
initial
begin
	S_expected[46] = 1'bX;
end 
// expected S[ 45 ]
initial
begin
	S_expected[45] = 1'bX;
end 
// expected S[ 44 ]
initial
begin
	S_expected[44] = 1'bX;
end 
// expected S[ 43 ]
initial
begin
	S_expected[43] = 1'bX;
end 
// expected S[ 42 ]
initial
begin
	S_expected[42] = 1'bX;
end 
// expected S[ 41 ]
initial
begin
	S_expected[41] = 1'bX;
end 
// expected S[ 40 ]
initial
begin
	S_expected[40] = 1'bX;
end 
// expected S[ 39 ]
initial
begin
	S_expected[39] = 1'bX;
end 
// expected S[ 38 ]
initial
begin
	S_expected[38] = 1'bX;
end 
// expected S[ 37 ]
initial
begin
	S_expected[37] = 1'bX;
end 
// expected S[ 36 ]
initial
begin
	S_expected[36] = 1'bX;
end 
// expected S[ 35 ]
initial
begin
	S_expected[35] = 1'bX;
end 
// expected S[ 34 ]
initial
begin
	S_expected[34] = 1'bX;
end 
// expected S[ 33 ]
initial
begin
	S_expected[33] = 1'bX;
end 
// expected S[ 32 ]
initial
begin
	S_expected[32] = 1'bX;
end 
// expected S[ 31 ]
initial
begin
	S_expected[31] = 1'bX;
end 
// expected S[ 30 ]
initial
begin
	S_expected[30] = 1'bX;
end 
// expected S[ 29 ]
initial
begin
	S_expected[29] = 1'bX;
end 
// expected S[ 28 ]
initial
begin
	S_expected[28] = 1'bX;
end 
// expected S[ 27 ]
initial
begin
	S_expected[27] = 1'bX;
end 
// expected S[ 26 ]
initial
begin
	S_expected[26] = 1'bX;
end 
// expected S[ 25 ]
initial
begin
	S_expected[25] = 1'bX;
end 
// expected S[ 24 ]
initial
begin
	S_expected[24] = 1'bX;
end 
// expected S[ 23 ]
initial
begin
	S_expected[23] = 1'bX;
end 
// expected S[ 22 ]
initial
begin
	S_expected[22] = 1'bX;
end 
// expected S[ 21 ]
initial
begin
	S_expected[21] = 1'bX;
end 
// expected S[ 20 ]
initial
begin
	S_expected[20] = 1'bX;
end 
// expected S[ 19 ]
initial
begin
	S_expected[19] = 1'bX;
end 
// expected S[ 18 ]
initial
begin
	S_expected[18] = 1'bX;
end 
// expected S[ 17 ]
initial
begin
	S_expected[17] = 1'bX;
end 
// expected S[ 16 ]
initial
begin
	S_expected[16] = 1'bX;
end 
// expected S[ 15 ]
initial
begin
	S_expected[15] = 1'bX;
end 
// expected S[ 14 ]
initial
begin
	S_expected[14] = 1'bX;
end 
// expected S[ 13 ]
initial
begin
	S_expected[13] = 1'bX;
end 
// expected S[ 12 ]
initial
begin
	S_expected[12] = 1'bX;
end 
// expected S[ 11 ]
initial
begin
	S_expected[11] = 1'bX;
end 
// expected S[ 10 ]
initial
begin
	S_expected[10] = 1'bX;
end 
// expected S[ 9 ]
initial
begin
	S_expected[9] = 1'bX;
end 
// expected S[ 8 ]
initial
begin
	S_expected[8] = 1'bX;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'bX;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'bX;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'bX;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'bX;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(S_expected or S or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected S = %b | expected zero = %b | ",S_expected_prev,zero_expected_prev);
	$display("| real S = %b | real zero = %b | ",S_prev,zero_prev);
`endif
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( S_expected_prev[8] !== 1'bx ) && ( S_prev[8] !== S_expected_prev[8] )
		&& ((S_expected_prev[8] !== last_S_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[8] = S_expected_prev[8];
	end
	if (
		( S_expected_prev[9] !== 1'bx ) && ( S_prev[9] !== S_expected_prev[9] )
		&& ((S_expected_prev[9] !== last_S_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[9] = S_expected_prev[9];
	end
	if (
		( S_expected_prev[10] !== 1'bx ) && ( S_prev[10] !== S_expected_prev[10] )
		&& ((S_expected_prev[10] !== last_S_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[10] = S_expected_prev[10];
	end
	if (
		( S_expected_prev[11] !== 1'bx ) && ( S_prev[11] !== S_expected_prev[11] )
		&& ((S_expected_prev[11] !== last_S_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[11] = S_expected_prev[11];
	end
	if (
		( S_expected_prev[12] !== 1'bx ) && ( S_prev[12] !== S_expected_prev[12] )
		&& ((S_expected_prev[12] !== last_S_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[12] = S_expected_prev[12];
	end
	if (
		( S_expected_prev[13] !== 1'bx ) && ( S_prev[13] !== S_expected_prev[13] )
		&& ((S_expected_prev[13] !== last_S_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[13] = S_expected_prev[13];
	end
	if (
		( S_expected_prev[14] !== 1'bx ) && ( S_prev[14] !== S_expected_prev[14] )
		&& ((S_expected_prev[14] !== last_S_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[14] = S_expected_prev[14];
	end
	if (
		( S_expected_prev[15] !== 1'bx ) && ( S_prev[15] !== S_expected_prev[15] )
		&& ((S_expected_prev[15] !== last_S_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[15] = S_expected_prev[15];
	end
	if (
		( S_expected_prev[16] !== 1'bx ) && ( S_prev[16] !== S_expected_prev[16] )
		&& ((S_expected_prev[16] !== last_S_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[16] = S_expected_prev[16];
	end
	if (
		( S_expected_prev[17] !== 1'bx ) && ( S_prev[17] !== S_expected_prev[17] )
		&& ((S_expected_prev[17] !== last_S_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[17] = S_expected_prev[17];
	end
	if (
		( S_expected_prev[18] !== 1'bx ) && ( S_prev[18] !== S_expected_prev[18] )
		&& ((S_expected_prev[18] !== last_S_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[18] = S_expected_prev[18];
	end
	if (
		( S_expected_prev[19] !== 1'bx ) && ( S_prev[19] !== S_expected_prev[19] )
		&& ((S_expected_prev[19] !== last_S_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[19] = S_expected_prev[19];
	end
	if (
		( S_expected_prev[20] !== 1'bx ) && ( S_prev[20] !== S_expected_prev[20] )
		&& ((S_expected_prev[20] !== last_S_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[20] = S_expected_prev[20];
	end
	if (
		( S_expected_prev[21] !== 1'bx ) && ( S_prev[21] !== S_expected_prev[21] )
		&& ((S_expected_prev[21] !== last_S_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[21] = S_expected_prev[21];
	end
	if (
		( S_expected_prev[22] !== 1'bx ) && ( S_prev[22] !== S_expected_prev[22] )
		&& ((S_expected_prev[22] !== last_S_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[22] = S_expected_prev[22];
	end
	if (
		( S_expected_prev[23] !== 1'bx ) && ( S_prev[23] !== S_expected_prev[23] )
		&& ((S_expected_prev[23] !== last_S_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[23] = S_expected_prev[23];
	end
	if (
		( S_expected_prev[24] !== 1'bx ) && ( S_prev[24] !== S_expected_prev[24] )
		&& ((S_expected_prev[24] !== last_S_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[24] = S_expected_prev[24];
	end
	if (
		( S_expected_prev[25] !== 1'bx ) && ( S_prev[25] !== S_expected_prev[25] )
		&& ((S_expected_prev[25] !== last_S_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[25] = S_expected_prev[25];
	end
	if (
		( S_expected_prev[26] !== 1'bx ) && ( S_prev[26] !== S_expected_prev[26] )
		&& ((S_expected_prev[26] !== last_S_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[26] = S_expected_prev[26];
	end
	if (
		( S_expected_prev[27] !== 1'bx ) && ( S_prev[27] !== S_expected_prev[27] )
		&& ((S_expected_prev[27] !== last_S_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[27] = S_expected_prev[27];
	end
	if (
		( S_expected_prev[28] !== 1'bx ) && ( S_prev[28] !== S_expected_prev[28] )
		&& ((S_expected_prev[28] !== last_S_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[28] = S_expected_prev[28];
	end
	if (
		( S_expected_prev[29] !== 1'bx ) && ( S_prev[29] !== S_expected_prev[29] )
		&& ((S_expected_prev[29] !== last_S_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[29] = S_expected_prev[29];
	end
	if (
		( S_expected_prev[30] !== 1'bx ) && ( S_prev[30] !== S_expected_prev[30] )
		&& ((S_expected_prev[30] !== last_S_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[30] = S_expected_prev[30];
	end
	if (
		( S_expected_prev[31] !== 1'bx ) && ( S_prev[31] !== S_expected_prev[31] )
		&& ((S_expected_prev[31] !== last_S_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[31] = S_expected_prev[31];
	end
	if (
		( S_expected_prev[32] !== 1'bx ) && ( S_prev[32] !== S_expected_prev[32] )
		&& ((S_expected_prev[32] !== last_S_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[32] = S_expected_prev[32];
	end
	if (
		( S_expected_prev[33] !== 1'bx ) && ( S_prev[33] !== S_expected_prev[33] )
		&& ((S_expected_prev[33] !== last_S_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[33] = S_expected_prev[33];
	end
	if (
		( S_expected_prev[34] !== 1'bx ) && ( S_prev[34] !== S_expected_prev[34] )
		&& ((S_expected_prev[34] !== last_S_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[34] = S_expected_prev[34];
	end
	if (
		( S_expected_prev[35] !== 1'bx ) && ( S_prev[35] !== S_expected_prev[35] )
		&& ((S_expected_prev[35] !== last_S_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[35] = S_expected_prev[35];
	end
	if (
		( S_expected_prev[36] !== 1'bx ) && ( S_prev[36] !== S_expected_prev[36] )
		&& ((S_expected_prev[36] !== last_S_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[36] = S_expected_prev[36];
	end
	if (
		( S_expected_prev[37] !== 1'bx ) && ( S_prev[37] !== S_expected_prev[37] )
		&& ((S_expected_prev[37] !== last_S_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[37] = S_expected_prev[37];
	end
	if (
		( S_expected_prev[38] !== 1'bx ) && ( S_prev[38] !== S_expected_prev[38] )
		&& ((S_expected_prev[38] !== last_S_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[38] = S_expected_prev[38];
	end
	if (
		( S_expected_prev[39] !== 1'bx ) && ( S_prev[39] !== S_expected_prev[39] )
		&& ((S_expected_prev[39] !== last_S_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[39] = S_expected_prev[39];
	end
	if (
		( S_expected_prev[40] !== 1'bx ) && ( S_prev[40] !== S_expected_prev[40] )
		&& ((S_expected_prev[40] !== last_S_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[40] = S_expected_prev[40];
	end
	if (
		( S_expected_prev[41] !== 1'bx ) && ( S_prev[41] !== S_expected_prev[41] )
		&& ((S_expected_prev[41] !== last_S_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[41] = S_expected_prev[41];
	end
	if (
		( S_expected_prev[42] !== 1'bx ) && ( S_prev[42] !== S_expected_prev[42] )
		&& ((S_expected_prev[42] !== last_S_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[42] = S_expected_prev[42];
	end
	if (
		( S_expected_prev[43] !== 1'bx ) && ( S_prev[43] !== S_expected_prev[43] )
		&& ((S_expected_prev[43] !== last_S_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[43] = S_expected_prev[43];
	end
	if (
		( S_expected_prev[44] !== 1'bx ) && ( S_prev[44] !== S_expected_prev[44] )
		&& ((S_expected_prev[44] !== last_S_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[44] = S_expected_prev[44];
	end
	if (
		( S_expected_prev[45] !== 1'bx ) && ( S_prev[45] !== S_expected_prev[45] )
		&& ((S_expected_prev[45] !== last_S_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[45] = S_expected_prev[45];
	end
	if (
		( S_expected_prev[46] !== 1'bx ) && ( S_prev[46] !== S_expected_prev[46] )
		&& ((S_expected_prev[46] !== last_S_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[46] = S_expected_prev[46];
	end
	if (
		( S_expected_prev[47] !== 1'bx ) && ( S_prev[47] !== S_expected_prev[47] )
		&& ((S_expected_prev[47] !== last_S_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[47] = S_expected_prev[47];
	end
	if (
		( S_expected_prev[48] !== 1'bx ) && ( S_prev[48] !== S_expected_prev[48] )
		&& ((S_expected_prev[48] !== last_S_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[48] = S_expected_prev[48];
	end
	if (
		( S_expected_prev[49] !== 1'bx ) && ( S_prev[49] !== S_expected_prev[49] )
		&& ((S_expected_prev[49] !== last_S_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[49] = S_expected_prev[49];
	end
	if (
		( S_expected_prev[50] !== 1'bx ) && ( S_prev[50] !== S_expected_prev[50] )
		&& ((S_expected_prev[50] !== last_S_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[50] = S_expected_prev[50];
	end
	if (
		( S_expected_prev[51] !== 1'bx ) && ( S_prev[51] !== S_expected_prev[51] )
		&& ((S_expected_prev[51] !== last_S_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[51] = S_expected_prev[51];
	end
	if (
		( S_expected_prev[52] !== 1'bx ) && ( S_prev[52] !== S_expected_prev[52] )
		&& ((S_expected_prev[52] !== last_S_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[52] = S_expected_prev[52];
	end
	if (
		( S_expected_prev[53] !== 1'bx ) && ( S_prev[53] !== S_expected_prev[53] )
		&& ((S_expected_prev[53] !== last_S_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[53] = S_expected_prev[53];
	end
	if (
		( S_expected_prev[54] !== 1'bx ) && ( S_prev[54] !== S_expected_prev[54] )
		&& ((S_expected_prev[54] !== last_S_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[54] = S_expected_prev[54];
	end
	if (
		( S_expected_prev[55] !== 1'bx ) && ( S_prev[55] !== S_expected_prev[55] )
		&& ((S_expected_prev[55] !== last_S_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[55] = S_expected_prev[55];
	end
	if (
		( S_expected_prev[56] !== 1'bx ) && ( S_prev[56] !== S_expected_prev[56] )
		&& ((S_expected_prev[56] !== last_S_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[56] = S_expected_prev[56];
	end
	if (
		( S_expected_prev[57] !== 1'bx ) && ( S_prev[57] !== S_expected_prev[57] )
		&& ((S_expected_prev[57] !== last_S_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[57] = S_expected_prev[57];
	end
	if (
		( S_expected_prev[58] !== 1'bx ) && ( S_prev[58] !== S_expected_prev[58] )
		&& ((S_expected_prev[58] !== last_S_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[58] = S_expected_prev[58];
	end
	if (
		( S_expected_prev[59] !== 1'bx ) && ( S_prev[59] !== S_expected_prev[59] )
		&& ((S_expected_prev[59] !== last_S_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[59] = S_expected_prev[59];
	end
	if (
		( S_expected_prev[60] !== 1'bx ) && ( S_prev[60] !== S_expected_prev[60] )
		&& ((S_expected_prev[60] !== last_S_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[60] = S_expected_prev[60];
	end
	if (
		( S_expected_prev[61] !== 1'bx ) && ( S_prev[61] !== S_expected_prev[61] )
		&& ((S_expected_prev[61] !== last_S_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[61] = S_expected_prev[61];
	end
	if (
		( S_expected_prev[62] !== 1'bx ) && ( S_prev[62] !== S_expected_prev[62] )
		&& ((S_expected_prev[62] !== last_S_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[62] = S_expected_prev[62];
	end
	if (
		( S_expected_prev[63] !== 1'bx ) && ( S_prev[63] !== S_expected_prev[63] )
		&& ((S_expected_prev[63] !== last_S_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_S_exp[63] = S_expected_prev[63];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DATAPATH_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] ADDR_RDA;
reg [2:0] ADDR_RDB;
reg [2:0] ADDR_WR;
reg CLK;
reg IE;
reg [31:0] INPORT;
reg OE;
reg [2:0] OPCODE;
reg [1:0] SHIFT_CONTROL;
reg WE;
// wires                                               
wire [63:0] S;
wire zero;

wire sampler;                             

// assign statements (if any)                          
DATAPATH i1 (
// port map - connection between master ports and signals/registers   
	.ADDR_RDA(ADDR_RDA),
	.ADDR_RDB(ADDR_RDB),
	.ADDR_WR(ADDR_WR),
	.CLK(CLK),
	.IE(IE),
	.INPORT(INPORT),
	.OE(OE),
	.OPCODE(OPCODE),
	.S(S),
	.SHIFT_CONTROL(SHIFT_CONTROL),
	.WE(WE),
	.zero(zero)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
// INPORT[ 31 ]
initial
begin
	INPORT[31] = 1'b0;
end 
// INPORT[ 30 ]
initial
begin
	INPORT[30] = 1'b0;
end 
// INPORT[ 29 ]
initial
begin
	INPORT[29] = 1'b0;
end 
// INPORT[ 28 ]
initial
begin
	INPORT[28] = 1'b0;
end 
// INPORT[ 27 ]
initial
begin
	INPORT[27] = 1'b0;
end 
// INPORT[ 26 ]
initial
begin
	INPORT[26] = 1'b0;
end 
// INPORT[ 25 ]
initial
begin
	INPORT[25] = 1'b0;
end 
// INPORT[ 24 ]
initial
begin
	INPORT[24] = 1'b0;
end 
// INPORT[ 23 ]
initial
begin
	INPORT[23] = 1'b0;
end 
// INPORT[ 22 ]
initial
begin
	INPORT[22] = 1'b0;
end 
// INPORT[ 21 ]
initial
begin
	INPORT[21] = 1'b0;
end 
// INPORT[ 20 ]
initial
begin
	INPORT[20] = 1'b0;
end 
// INPORT[ 19 ]
initial
begin
	INPORT[19] = 1'b0;
end 
// INPORT[ 18 ]
initial
begin
	INPORT[18] = 1'b0;
end 
// INPORT[ 17 ]
initial
begin
	INPORT[17] = 1'b0;
end 
// INPORT[ 16 ]
initial
begin
	INPORT[16] = 1'b0;
end 
// INPORT[ 15 ]
initial
begin
	INPORT[15] = 1'b0;
end 
// INPORT[ 14 ]
initial
begin
	INPORT[14] = 1'b0;
end 
// INPORT[ 13 ]
initial
begin
	INPORT[13] = 1'b0;
end 
// INPORT[ 12 ]
initial
begin
	INPORT[12] = 1'b0;
end 
// INPORT[ 11 ]
initial
begin
	INPORT[11] = 1'b0;
end 
// INPORT[ 10 ]
initial
begin
	INPORT[10] = 1'b0;
end 
// INPORT[ 9 ]
initial
begin
	INPORT[9] = 1'b0;
end 
// INPORT[ 8 ]
initial
begin
	INPORT[8] = 1'b0;
end 
// INPORT[ 7 ]
initial
begin
	INPORT[7] = 1'b0;
end 
// INPORT[ 6 ]
initial
begin
	INPORT[6] = 1'b0;
end 
// INPORT[ 5 ]
initial
begin
	INPORT[5] = 1'b0;
end 
// INPORT[ 4 ]
initial
begin
	INPORT[4] = 1'b0;
end 
// INPORT[ 3 ]
initial
begin
	INPORT[3] = 1'b0;
end 
// INPORT[ 2 ]
initial
begin
	INPORT[2] = 1'b0;
	INPORT[2] = #50000 1'b1;
	INPORT[2] = #50000 1'b0;
end 
// INPORT[ 1 ]
initial
begin
	INPORT[1] = 1'b0;
	INPORT[1] = #100000 1'b1;
	INPORT[1] = #50000 1'b0;
end 
// INPORT[ 0 ]
initial
begin
	INPORT[0] = 1'b0;
	INPORT[0] = #50000 1'b1;
	INPORT[0] = #50000 1'b0;
end 

// IE
initial
begin
	IE = 1'b0;
	IE = #50000 1'b1;
	IE = #100000 1'b0;
end 
// ADDR_WR[ 2 ]
initial
begin
	ADDR_WR[2] = 1'b0;
	ADDR_WR[2] = #150000 1'b1;
	ADDR_WR[2] = #50000 1'b0;
end 
// ADDR_WR[ 1 ]
initial
begin
	ADDR_WR[1] = 1'b0;
	ADDR_WR[1] = #300000 1'b1;
	ADDR_WR[1] = #50000 1'b0;
	ADDR_WR[1] = #100000 1'b1;
	ADDR_WR[1] = #50000 1'b0;
	ADDR_WR[1] = #50000 1'b1;
	ADDR_WR[1] = #50000 1'b0;
	ADDR_WR[1] = #50000 1'b1;
	ADDR_WR[1] = #50000 1'b0;
end 
// ADDR_WR[ 0 ]
initial
begin
	ADDR_WR[0] = 1'b0;
	ADDR_WR[0] = #100000 1'b1;
	ADDR_WR[0] = #100000 1'b0;
	ADDR_WR[0] = #50000 1'b1;
	ADDR_WR[0] = #50000 1'b0;
	ADDR_WR[0] = #200000 1'b1;
	ADDR_WR[0] = #50000 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #50000 1'b1;
	WE = #150000 1'b0;
	WE = #50000 1'b1;
	WE = #100000 1'b0;
	WE = #100000 1'b1;
	WE = #150000 1'b0;
end 
// ADDR_RDA[ 2 ]
initial
begin
	ADDR_RDA[2] = 1'b0;
	ADDR_RDA[2] = #150000 1'b1;
	ADDR_RDA[2] = #50000 1'b0;
end 
// ADDR_RDA[ 1 ]
initial
begin
	ADDR_RDA[1] = 1'b0;
	ADDR_RDA[1] = #300000 1'b1;
	ADDR_RDA[1] = #50000 1'b0;
	ADDR_RDA[1] = #100000 1'b1;
	ADDR_RDA[1] = #50000 1'b0;
	ADDR_RDA[1] = #50000 1'b1;
	ADDR_RDA[1] = #50000 1'b0;
	ADDR_RDA[1] = #50000 1'b1;
	ADDR_RDA[1] = #50000 1'b0;
end 
// ADDR_RDA[ 0 ]
initial
begin
	ADDR_RDA[0] = 1'b0;
	ADDR_RDA[0] = #200000 1'b1;
	ADDR_RDA[0] = #100000 1'b0;
	ADDR_RDA[0] = #50000 1'b1;
	ADDR_RDA[0] = #100000 1'b0;
	ADDR_RDA[0] = #50000 1'b1;
	ADDR_RDA[0] = #50000 1'b0;
	ADDR_RDA[0] = #50000 1'b1;
	ADDR_RDA[0] = #50000 1'b0;
end 
// ADDR_RDB[ 2 ]
initial
begin
	ADDR_RDB[2] = 1'b0;
	ADDR_RDB[2] = #150000 1'b1;
	ADDR_RDB[2] = #100000 1'b0;
	ADDR_RDB[2] = #100000 1'b1;
	ADDR_RDB[2] = #100000 1'b0;
	ADDR_RDB[2] = #150000 1'b1;
	ADDR_RDB[2] = #50000 1'b0;
end 
// ADDR_RDB[ 1 ]
initial
begin
	ADDR_RDB[1] = 1'b0;
	ADDR_RDB[1] = #300000 1'b1;
	ADDR_RDB[1] = #100000 1'b0;
	ADDR_RDB[1] = #150000 1'b1;
	ADDR_RDB[1] = #150000 1'b0;
end 
// ADDR_RDB[ 0 ]
initial
begin
	ADDR_RDB[0] = 1'b0;
	ADDR_RDB[0] = #200000 1'b1;
	ADDR_RDB[0] = #100000 1'b0;
	ADDR_RDB[0] = #100000 1'b1;
	ADDR_RDB[0] = #50000 1'b0;
	ADDR_RDB[0] = #50000 1'b1;
	ADDR_RDB[0] = #50000 1'b0;
end 
// OPCODE[ 2 ]
initial
begin
	OPCODE[2] = 1'b0;
	OPCODE[2] = #50000 1'b1;
	OPCODE[2] = #100000 1'b0;
	OPCODE[2] = #50000 1'b1;
	OPCODE[2] = #150000 1'b0;
	OPCODE[2] = #50000 1'b1;
	OPCODE[2] = #50000 1'b0;
	OPCODE[2] = #50000 1'b1;
	OPCODE[2] = #100000 1'b0;
	OPCODE[2] = #50000 1'b1;
	OPCODE[2] = #50000 1'b0;
end 
// OPCODE[ 1 ]
initial
begin
	OPCODE[1] = 1'b0;
	OPCODE[1] = #150000 1'b1;
	OPCODE[1] = #50000 1'b0;
end 
// OPCODE[ 0 ]
initial
begin
	OPCODE[0] = 1'b0;
	OPCODE[0] = #450000 1'b1;
	OPCODE[0] = #50000 1'b0;
end 
// SHIFT_CONTROL[ 1 ]
initial
begin
	SHIFT_CONTROL[1] = 1'b0;
	SHIFT_CONTROL[1] = #300000 1'b1;
	SHIFT_CONTROL[1] = #50000 1'b0;
	SHIFT_CONTROL[1] = #200000 1'b1;
	SHIFT_CONTROL[1] = #50000 1'b0;
end 
// SHIFT_CONTROL[ 0 ]
initial
begin
	SHIFT_CONTROL[0] = 1'b0;
	SHIFT_CONTROL[0] = #250000 1'b1;
	SHIFT_CONTROL[0] = #50000 1'b0;
	SHIFT_CONTROL[0] = #200000 1'b1;
	SHIFT_CONTROL[0] = #50000 1'b0;
end 

// OE
initial
begin
	OE = 1'b1;
end 

DATAPATH_vlg_sample_tst tb_sample (
	.ADDR_RDA(ADDR_RDA),
	.ADDR_RDB(ADDR_RDB),
	.ADDR_WR(ADDR_WR),
	.CLK(CLK),
	.IE(IE),
	.INPORT(INPORT),
	.OE(OE),
	.OPCODE(OPCODE),
	.SHIFT_CONTROL(SHIFT_CONTROL),
	.WE(WE),
	.sampler_tx(sampler)
);

DATAPATH_vlg_check_tst tb_out(
	.S(S),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

